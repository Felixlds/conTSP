	
	using Random
	using Plots
	using JuMP
    using Gurobi



	Ncus=18
	Nloc=Ncus+1
	K=3   #Número de periodos  
	L=1000 #constante de consistencia 
	M=6000
	
	
	#Creamos un vector con las coordenadas de la localización de clientes y depósito
	rng = Random.seed!(1234);
	l=[rand(rng, 0:1000, 2) for i=1:Nloc]
	#Vector con clientes que visita cada día 
	Vk=[randsubseq(rng,2:Nloc, 0.5) for i=1:K]
	Vk0=deepcopy(Vk)
	for i=1:K
	    push!(Vk[i],1)
	    sort!(Vk[i])
	end
	print("Vk0: ",Vk0, "\n")
	
	print("Vk:",Vk)
	

	
	
	#matriz que registra la distancia l[i] a l[j] en la componente D[i,j]
	D=zeros(Nloc,Nloc)
	for i in 1:Nloc
	    for j in 1:Nloc
	        D[i,j]=round(sqrt(((l[j][1]-l[i][1])^2)+((l[i][2]-l[j][2])^2)),digits=1)
	    end
	end
	

	T=D              #matriz de tiempos tij
	

	
	# Se inicia el modelo.
	model = Model(Gurobi.Optimizer)

	
	
	# Se definen las variables.
	@variable(model,x[1:Nloc,1:Nloc,1:K],binary=true)
	@variable(model,0<=u[1:Nloc,1:K])
	
	#función objetivo min costes
	@objective(model,Min,sum(sum(sum(D[i,j]*x[i,j,k] for j=1:Nloc) for i=1:Nloc) for k=1:K))
	
	#funcion objetivo min costes y tiempos de llegada
	#@objective(model,Min,sum(sum(sum(D[i,j]*x[i,j,k] for j=1:Nloc) for i=1:Nloc) for k=1:K)+sum(sum(u[j,k] for j=1:Nloc) for k=1:K))    
	 
	#funcion objetivo min tiempos de llegada
	#@objective(model,Min,sum(sum(u[j,k] for j=1:Nloc) for k=1:K))

	@constraint(model,[k=1:K,i in Vk[k]],sum(x[i,j,k] for j in Vk[k] if i!=j )==1 );
	@constraint(model,[k=1:K,i in Vk[k]],sum(x[j,i,k] for j in Vk[k] if i!=j )==1 );
	
	@constraint(model,[k=1:K,j in Vk0[k], i in Vk[k];i!=j],u[j,k]>=u[i,k]+T[i,j]*x[i,j,k]-M*(1-x[i,j,k]));
	@constraint(model,[k=1:K,j in Vk0[k], i in Vk[k];i!=j],u[j,k]<=u[i,k]+T[i,j]*x[i,j,k]+M*(1-x[i,j,k]));
	@constraint(model,[k=1:K,l=1:K,i in intersect(Vk[k],Vk[l]) ;k!=l ], u[i,k]-u[i,l]<=L );
	
	optimize!(model);
	#solution_summary(model)
	#time_limit_sec(model)




#impresión de los caminos que toma y los tiempos de llegada

for k=1:K
    println("\nPeriodo",k,"\n")
    for i=1:Nloc
        for j=1:Nloc
            if 0.9<=value(x[i,j,k])<=1.1
            println("x[",i,",",j,",",k,"]=",value(x[i,j,k]))
            end
        end
    end
end


for k=1:K
    println("\nPeriodo",k,"\n")
    for i=1:Nloc
      
         println("u[",i,",",k,"]=",value(u[i,k]))
        
    end
end

#grafos
using Compose
using Cairo
using Colors
using Graphs
using GraphPlot
g= [SimpleDiGraph(Nloc) for i=1:K] # graph 
nodelab = 1:nv(g[1])
locsx = [l[i][1] for i=1:Nloc ]
locsy = [l[i][2] for i=1:Nloc ]

membership = [1 for i=1:Nloc]
nodecolor = [colorant"skyblue", colorant"orange"]
# membership color
membership[1]=2
nodefil = nodecolor[membership]

c="123456789ABCD..."
p=".png"

for k=1:K
    for i in Vk[k]
      for j in Vk[k]
          if 0.9<=value(x[i,j,k])<=1.1
            add_edge!(g[k], i, j)
          end
      end
    end 
     h=gplot(g[k],locsx, locsy,nodefillc=nodefil,nodelabel=nodelab)
     draw(PNG(c[k]*p, 18cm, 18cm),h)
  end
  
  println("tiene solucion:",has_values(model))
  println("valor:",objective_value(model))
  println("tiempo de busqueda de solución:" ,solve_time(model))
